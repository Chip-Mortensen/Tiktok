rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User rules
    match /users/{userId} {
      allow read: if true;  // Anyone can read user profiles
      allow create: if request.auth != null;  // Authenticated users can create profiles
      allow update: if request.auth != null && (
        request.auth.uid == userId ||  // User can update their own profile
        (
          // Allow updating only follower/following counts from other users
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['followersCount', 'followingCount']) &&
          // Ensure the increment is only +1 or -1
          (
            math.abs(request.resource.data.followersCount - resource.data.followersCount) <= 1 ||
            math.abs(request.resource.data.followingCount - resource.data.followingCount) <= 1
          )
        )
      );
      
      // User followers/following subcollections
      match /userFollowers/{followerId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      match /userFollowing/{followingId} {
        allow read: if true;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Following collection rules (root level)
    match /following/{userId}/following/{targetUserId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Following collection rules (user subcollection)
    match /users/{userId}/userFollowing/{targetUserId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId}/userFollowers/{followerId} {
      allow read: if true;
      allow write: if request.auth != null && (request.auth.uid == userId || request.auth.uid == followerId);
    }
    
    // User Likes collection
    match /userLikes/{userId}/{document=**} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Username uniqueness collection
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid &&
        username.lower() == request.resource.id &&
        username.matches('^[a-zA-Z0-9_.]+$') &&
        username.size() >= 3 && username.size() <= 30;
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }
    
    // Video rules
    match /videos/{videoId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        get(/databases/$(database)/documents/videos/$(videoId)).data.userId == request.auth.uid;
    }
    
    // Comments collection rules
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      // Allow querying comments by videoId
      allow list: if request.query.limit <= 100 &&
                 (request.query.filters.size() == 0 ||
                  (request.query.filters.size() == 1 &&
                   request.query.filters[0].op == "==" &&
                   request.query.filters[0].path == ["videoId"]));
      // Only authenticated users can create comments
      allow create: if request.auth != null &&
                      request.resource.data.keys().hasAll(['videoId', 'userId', 'text', 'timestamp']) &&
                      request.resource.data.userId == request.auth.uid;
      // Only comment owner can update or delete
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 